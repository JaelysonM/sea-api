"""empty message

Revision ID: 0537081af6f7
Revises: af8196ee24d6
Create Date: 2025-02-02 22:05:29.922192

"""
import os
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "0537081af6f7"
down_revision = "af8196ee24d6"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "stores_config",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "supports_dynamic_pricing",
            sa.Boolean(),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "stores",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "name", sa.String(length=255), nullable=False
        ),
        sa.Column(
            "identifier",
            sa.String(length=18),
            nullable=False,
        ),
        sa.Column(
            "address", sa.String(length=255), nullable=False
        ),
        sa.Column(
            "zipcode", sa.String(length=9), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "store_config_id", sa.Integer(), nullable=False
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["store_config_id"],
            ["stores_config.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_stores_identifier"),
        "stores",
        ["identifier"],
        unique=True,
    )
    op.create_table(
        "store_schedules",
        sa.Column("store_id", sa.Integer(), nullable=False),
        sa.Column(
            "day_of_week", sa.Integer(), nullable=False
        ),
        sa.Column("opens_at", sa.Time(), nullable=True),
        sa.Column("closes_at", sa.Time(), nullable=True),
        sa.Column(
            "is_closed", sa.Boolean(), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["store_id"], ["stores.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("store_id", "day_of_week"),
    )
    # ### end Alembic commands ###
    script_path = os.path.abspath(
        os.path.join(
            os.path.dirname(__file__),
            "..",
            "sql",
            "0537081af6f7" + ".sql",
        )
    )
    if os.path.exists(script_path):
        with open(script_path, "r") as f:
            script_content = f.read()

        conn = op.get_bind()
        if conn.dialect.name == "sqlite":

            conn.connection.executescript(script_content)
        else:
            op.execute(script_content)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("store_schedules")
    op.drop_index(
        op.f("ix_stores_identifier"), table_name="stores"
    )
    op.drop_table("stores")
    op.drop_table("stores_config")
    # ### end Alembic commands ###

"""empty message

Revision ID: af8196ee24d6
Revises: 
Create Date: 2025-02-02 20:49:34.340065

"""
import os
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "af8196ee24d6"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "groups",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "name", sa.String(length=255), nullable=False
        ),
        sa.Column("default", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "permissions",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "name", sa.String(length=255), nullable=False
        ),
        sa.Column(
            "code", sa.String(length=255), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_permissions_code"),
        "permissions",
        ["code"],
        unique=True,
    )
    op.create_table(
        "users",
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "first_name",
            sa.String(length=255),
            nullable=False,
        ),
        sa.Column(
            "last_name",
            sa.String(length=255),
            nullable=False,
        ),
        sa.Column(
            "email", sa.String(length=255), nullable=False
        ),
        sa.Column(
            "password",
            sa.String(length=255),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column(
            "is_super_user", sa.Boolean(), nullable=True
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "deleted_at", sa.DateTime(), nullable=True
        ),
        sa.Column(
            "last_login", sa.DateTime(), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_users_email"),
        "users",
        ["email"],
        unique=True,
    )
    op.create_table(
        "group_permissions",
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column(
            "permission_id", sa.Integer(), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["groups.id"],
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
        ),
        sa.PrimaryKeyConstraint(
            "group_id", "permission_id"
        ),
    )
    op.create_table(
        "tokens",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "type", sa.String(length=255), nullable=False
        ),
        sa.Column(
            "token", sa.String(length=255), nullable=False
        ),
        sa.Column(
            "reference", sa.BigInteger(), nullable=True
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "expiration",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["reference"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_groups",
        sa.Column(
            "user_id", sa.BigInteger(), nullable=False
        ),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["groups.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "group_id"),
    )
    # ### end Alembic commands ###
    script_path = os.path.abspath(
        os.path.join(
            os.path.dirname(__file__),
            "..",
            "sql",
            "af8196ee24d6" + ".sql",
        )
    )
    if os.path.exists(script_path):
        with open(script_path, "r") as f:
            script_content = f.read()

        conn = op.get_bind()
        if conn.dialect.name == "sqlite":

            conn.connection.executescript(script_content)
        else:
            op.execute(script_content)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_groups")
    op.drop_table("tokens")
    op.drop_table("group_permissions")
    op.drop_index(
        op.f("ix_users_email"), table_name="users"
    )
    op.drop_table("users")
    op.drop_index(
        op.f("ix_permissions_code"),
        table_name="permissions",
    )
    op.drop_table("permissions")
    op.drop_table("groups")
    # ### end Alembic commands ###

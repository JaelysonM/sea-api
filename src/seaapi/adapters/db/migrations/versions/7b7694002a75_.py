"""empty message

Revision ID: 7b7694002a75
Revises: a460a64f0dc5
Create Date: 2025-07-05 19:08:43.419432

"""
import os
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "7b7694002a75"
down_revision = "a460a64f0dc5"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "meals",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "user_id", sa.BigInteger(), nullable=False
        ),
        sa.Column(
            "final_price",
            sa.Float(),
            server_default="0.0",
            nullable=False,
        ),
        sa.Column(
            "finished",
            sa.Boolean(),
            server_default="false",
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "food_measurements",
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("meal_id", sa.Integer(), nullable=False),
        sa.Column("food_id", sa.Integer(), nullable=False),
        sa.Column("weight", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["food_id"],
            ["foods.id"],
        ),
        sa.ForeignKeyConstraint(
            ["meal_id"],
            ["meals.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###
    script_path = os.path.abspath(
        os.path.join(
            os.path.dirname(__file__),
            "..",
            "sql",
            "7b7694002a75" + ".sql",
        )
    )
    if os.path.exists(script_path):
        with open(script_path, "r") as f:
            script_content = f.read()

        conn = op.get_bind()
        if conn.dialect.name == "sqlite":

            conn.connection.executescript(script_content)
        else:
            op.execute(script_content)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("food_measurements")
    op.drop_table("meals")
    # ### end Alembic commands ###
